# FILE: modules/financials/actions/unlimited_plans_admin.py (NEW FILE)

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters
)
from telegram.constants import ParseMode

# --- Local Imports ---
from database.db_manager import (
    get_all_unlimited_plans,
    add_unlimited_plan,
    delete_unlimited_plan,
    get_unlimited_plan_by_id,
    update_unlimited_plan
)
from .settings import show_plan_management_menu
from shared.callbacks import cancel_conversation

# --- SETUP ---
LOGGER = logging.getLogger(__name__)

# --- Conversation States for Adding a New Plan ---
GET_NAME, GET_PRICE, GET_IPS, GET_SORT_ORDER, CONFIRM_ADD = range(5)

# =============================================================================
# 1. Main Menu and List Display
# =============================================================================

async def manage_unlimited_plans_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Displays the main menu for managing unlimited plans.
    It fetches all plans from the DB and builds an interactive list.
    """
    query = update.callback_query
    await query.answer()

    all_plans = await get_all_unlimited_plans()
    
    text = "üíé *ŸÖÿØ€åÿ±€åÿ™ ŸæŸÑŸÜ‚ÄåŸáÿß€å ŸÜÿßŸÖÿ≠ÿØŸàÿØ*\n\n"
    keyboard_rows = []

    if not all_plans:
        text += "Ÿá€å⁄Ü ŸæŸÑŸÜ€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ. ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ €å⁄© ŸæŸÑŸÜ ÿ¨ÿØ€åÿØ ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ."
    else:
        text += "ŸÑ€åÿ≥ÿ™ ŸæŸÑŸÜ‚ÄåŸáÿß€å ÿ™ÿπÿ±€åŸÅ ÿ¥ÿØŸá:"
        for plan in all_plans:
            status_icon = "‚úÖ" if plan['is_active'] else "‚ùå"
            plan_text = f"{status_icon} {plan['plan_name']} - {plan['price']:,} ÿ™ŸàŸÖÿßŸÜ - {plan['max_ips']} ⁄©ÿßÿ±ÿ®ÿ±"
            
            # Buttons for each plan
            plan_buttons = [
                # InlineKeyboardButton("‚úèÔ∏è Ÿà€åÿ±ÿß€åÿ¥", callback_data=f"unlimplan_edit_{plan['id']}"), # Coming Soon
                InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ", callback_data=f"unlimplan_delete_{plan['id']}"),
                InlineKeyboardButton("ŸÅÿπÿßŸÑ/ÿ∫€åÿ±ŸÅÿπÿßŸÑ", callback_data=f"unlimplan_toggle_{plan['id']}")
            ]
            keyboard_rows.append([InlineKeyboardButton(plan_text, callback_data=f"unlimplan_noop_{plan['id']}")])
            keyboard_rows.append(plan_buttons)

    # General action buttons
    keyboard_rows.append([InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ŸæŸÑŸÜ ÿ¨ÿØ€åÿØ", callback_data="unlimplan_add_new")])
    keyboard_rows.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_plan_management")])
    
    reply_markup = InlineKeyboardMarkup(keyboard_rows)
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

# =============================================================================
# 2. Add New Plan Conversation
# =============================================================================

async def start_add_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the conversation to add a new unlimited plan."""
    query = update.callback_query
    await query.answer()
    context.user_data['new_unlimited_plan'] = {}
    
    text = "‚ûï *ÿßŸÅÿ≤ŸàÿØŸÜ ŸæŸÑŸÜ ÿ¨ÿØ€åÿØ*\n\nŸÖÿ±ÿ≠ŸÑŸá €± ÿßÿ≤ €¥: ŸÑÿ∑ŸÅÿßŸã **ŸÜÿßŸÖ ŸæŸÑŸÜ** ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ŸÖÿ´ŸÑÿßŸã: üíé ŸÜÿßŸÖÿ≠ÿØŸàÿØ ÿ™⁄© ⁄©ÿßÿ±ÿ®ÿ±Ÿá).\n\nÿ®ÿ±ÿß€å ŸÑÿ∫Ÿà /cancel ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ."
    await query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN)
    return GET_NAME

async def get_plan_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Gets the plan name and asks for the price."""
    plan_name = update.message.text.strip()
    context.user_data['new_unlimited_plan']['name'] = plan_name
    
    text = f"‚úÖ ŸÜÿßŸÖ ŸæŸÑŸÜ: *{plan_name}*\n\nŸÖÿ±ÿ≠ŸÑŸá €≤ ÿßÿ≤ €¥: ŸÑÿ∑ŸÅÿßŸã **ŸÇ€åŸÖÿ™ ŸæŸÑŸÜ** ÿ±ÿß ÿ®Ÿá ÿ™ŸàŸÖÿßŸÜ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ŸÅŸÇÿ∑ ÿπÿØÿØ)."
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    return GET_PRICE

async def get_plan_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Gets the price and asks for the max simultaneous users (max_ips)."""
    price_text = update.message.text.strip()
    try:
        price = int(price_text)
        if price < 0: raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå ŸÇ€åŸÖÿ™ ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™. ŸÑÿ∑ŸÅÿßŸã ŸÅŸÇÿ∑ €å⁄© ÿπÿØÿØ ŸÖÿ´ÿ®ÿ™ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")
        return GET_PRICE
    
    context.user_data['new_unlimited_plan']['price'] = price
    text = f"‚úÖ ŸÇ€åŸÖÿ™: *{price:,}* ÿ™ŸàŸÖÿßŸÜ\n\nŸÖÿ±ÿ≠ŸÑŸá €≥ ÿßÿ≤ €¥: ŸÑÿ∑ŸÅÿßŸã **ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ± ŸáŸÖÿ≤ŸÖÿßŸÜ** (ÿ™ÿπÿØÿßÿØ ÿØÿ≥ÿ™⁄ØÿßŸá) ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ŸÖÿ´ŸÑÿßŸã ÿ®ÿ±ÿß€å ÿ™⁄© ⁄©ÿßÿ±ÿ®ÿ±Ÿá ÿπÿØÿØ 1)."
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    return GET_IPS

async def get_max_ips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Gets max_ips and asks for the sort order."""
    ips_text = update.message.text.strip()
    try:
        max_ips = int(ips_text)
        if max_ips <= 0: raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ± ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™. ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ÿµÿ≠€åÿ≠ Ÿà ŸÖÿ´ÿ®ÿ™ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")
        return GET_IPS
        
    context.user_data['new_unlimited_plan']['max_ips'] = max_ips
    text = f"‚úÖ ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±: *{max_ips}*\n\nŸÖÿ±ÿ≠ŸÑŸá €¥ ÿßÿ≤ €¥: ŸÑÿ∑ŸÅÿßŸã **ÿ™ÿ±ÿ™€åÿ® ŸÜŸÖÿß€åÿ¥** ÿß€åŸÜ ŸæŸÑŸÜ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ÿπÿØÿØ ⁄©Ÿà⁄Ü⁄©ÿ™ÿ± = ÿ®ÿßŸÑÿßÿ™ÿ±)."
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    return GET_SORT_ORDER
    
async def get_sort_order_and_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Gets sort_order, shows a confirmation, and waits for final approval."""
    sort_order_text = update.message.text.strip()
    try:
        sort_order = int(sort_order_text)
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå ÿ™ÿ±ÿ™€åÿ® ŸÜŸÖÿß€åÿ¥ ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™. ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")
        return GET_SORT_ORDER

    context.user_data['new_unlimited_plan']['sort_order'] = sort_order
    plan_data = context.user_data['new_unlimited_plan']

    text = (
        f"üìã *ÿ™ÿß€å€åÿØ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸæŸÑŸÜ ÿ¨ÿØ€åÿØ*\n\n"
        f"‚ñ´Ô∏è ŸÜÿßŸÖ ŸæŸÑŸÜ: *{plan_data['name']}*\n"
        f"‚ñ´Ô∏è ŸÇ€åŸÖÿ™: *{plan_data['price']:,}* ÿ™ŸàŸÖÿßŸÜ\n"
        f"‚ñ´Ô∏è ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±: *{plan_data['max_ips']}*\n"
        f"‚ñ´Ô∏è ÿ™ÿ±ÿ™€åÿ® ŸÜŸÖÿß€åÿ¥: *{plan_data['sort_order']}*\n\n"
        "ÿ¢€åÿß ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅŸàŸÇ ÿ±ÿß ÿ™ÿß€å€åÿØ ŸÖ€å‚Äå⁄©ŸÜ€åÿØÿü"
    )
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ∞ÿÆ€åÿ±Ÿá ⁄©ŸÜ", callback_data="unlimplan_confirm_add"),
            InlineKeyboardButton("‚ùå ÿÆ€åÿ±ÿå ŸÑÿ∫Ÿà ⁄©ŸÜ", callback_data="unlimplan_cancel_add")
        ]
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    return CONFIRM_ADD

async def save_new_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Saves the new plan to the DB and ends the conversation."""
    query = update.callback_query
    await query.answer("ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá...")
    
    plan_data = context.user_data.pop('new_unlimited_plan', {})
    if not plan_data:
        await query.edit_message_text("‚ùå ÿÆÿ∑ÿß: ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸæŸÑŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return ConversationHandler.END

    await add_unlimited_plan(
        plan_name=plan_data['name'],
        price=plan_data['price'],
        max_ips=plan_data['max_ips'],
        sort_order=plan_data['sort_order']
    )
    await query.edit_message_text("‚úÖ ŸæŸÑŸÜ ÿ¨ÿØ€åÿØ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.")
    await manage_unlimited_plans_menu(update, context) # Refresh the list
    return ConversationHandler.END

async def cancel_add_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels the add plan conversation."""
    query = update.callback_query
    await query.answer()
    context.user_data.pop('new_unlimited_plan', None)
    await query.edit_message_text("ÿπŸÖŸÑ€åÿßÿ™ ÿßŸÅÿ≤ŸàÿØŸÜ ŸæŸÑŸÜ ŸÑÿ∫Ÿà ÿ¥ÿØ.")
    await manage_unlimited_plans_menu(update, context) # Go back to the list
    return ConversationHandler.END

# =============================================================================
# 3. Handlers for Plan Actions (Delete, Toggle Status)
# =============================================================================

async def confirm_delete_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Asks for confirmation before deleting a plan."""
    query = update.callback_query
    plan_id = int(query.data.split('_')[-1])
    
    plan = await get_unlimited_plan_by_id(plan_id)
    if not plan:
        await query.answer("‚ùå ŸæŸÑŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!", show_alert=True)
        return

    text = f"‚ö†Ô∏è ÿ¢€åÿß ÿßÿ≤ ÿ≠ÿ∞ŸÅ ŸæŸÑŸÜ '{plan['plan_name']}' ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØÿü ÿß€åŸÜ ÿπŸÖŸÑ ÿ∫€åÿ±ŸÇÿßÿ®ŸÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿßÿ≥ÿ™."
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ≠ÿ∞ŸÅ ⁄©ŸÜ", callback_data=f"unlimplan_do_delete_{plan_id}"),
            InlineKeyboardButton("‚ùå ÿÆ€åÿ±", callback_data="admin_manage_unlimited")
        ]
    ]
    await query.answer()
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
async def execute_delete_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Deletes the plan from the DB."""
    query = update.callback_query
    plan_id = int(query.data.split('_')[-1])
    
    await query.answer("... ÿØÿ± ÿ≠ÿßŸÑ ÿ≠ÿ∞ŸÅ")
    success = await delete_unlimited_plan(plan_id)
    
    if success:
        await query.edit_message_text("‚úÖ ŸæŸÑŸÜ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")
    else:
        await query.edit_message_text("‚ùå ÿÆÿ∑ÿß€å€å ÿØÿ± ÿ≠ÿ∞ŸÅ ŸæŸÑŸÜ ÿ±ÿÆ ÿØÿßÿØ.")
        
    await manage_unlimited_plans_menu(update, context)

async def toggle_plan_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Toggles the is_active status of a plan."""
    query = update.callback_query
    plan_id = int(query.data.split('_')[-1])
    
    await query.answer("... ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ∫€å€åÿ± Ÿàÿ∂ÿπ€åÿ™")
    plan = await get_unlimited_plan_by_id(plan_id)
    if not plan:
        await query.answer("‚ùå ŸæŸÑŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!", show_alert=True)
        return
        
    # Toggle the status
    new_status = not plan['is_active']
    
    await update_unlimited_plan(
        plan_id=plan_id,
        plan_name=plan['plan_name'],
        price=plan['price'],
        max_ips=plan['max_ips'],
        is_active=new_status,
        sort_order=plan['sort_order']
    )
    
    await manage_unlimited_plans_menu(update, context)

# =============================================================================
# 4. Conversation Handler Definition
# =============================================================================

add_unlimited_plan_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_add_plan, pattern='^unlimplan_add_new$')],
    states={
        GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_plan_name)],
        GET_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_plan_price)],
        GET_IPS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_max_ips)],
        GET_SORT_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sort_order_and_confirm)],
        CONFIRM_ADD: [
            CallbackQueryHandler(save_new_plan, pattern='^unlimplan_confirm_add$'),
            CallbackQueryHandler(cancel_add_plan, pattern='^unlimplan_cancel_add$')
        ]
    },
    fallbacks=[CommandHandler('cancel', cancel_conversation)], # A generic cancel handler
    conversation_timeout=600
)